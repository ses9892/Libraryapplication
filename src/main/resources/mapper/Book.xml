<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.library.application.mapper.BookMapper">
    <sql id="BookImgColums">
        board_idx
        , original_name
		, save_name
		, size
		, delete_yn
		, insert_time
		, delete_time
        , extenstion
    </sql>
    <sql id="BookDto">
        a1.idx,
        a1.name,
        a1.publisher,
        a1.author,
        a1.topic,
        a1.userId,
        a1.topic2,
        a1.borrow,
        a2.save_name,
        a1.detail
    </sql>

    <insert id="insertBookImg" parameterType="list">
        insert into Book_img(
                    <include refid="BookImgColums"/>
        )values
        <foreach collection="list" item="img" separator=",">
            (
            #{img.boardIdx},
            #{img.originalName},
            #{img.saveName},
            #{img.size}
            ,'N'
            ,NOW()
            ,NULL
            ,#{img.extenstion}
            )
        </foreach>
    </insert>
    <select id="selectBookIdx" resultType="int" parameterType="com.library.application.dto.BookDto">
        select idx from `Book` where userId =#{userId} and name = #{name}
    </select>

    <select id="selectByIdx" resultType="com.library.application.dto.BookDto" parameterType="int">
        select  <include refid="BookDto"/>
        from `Book` a1 , `Book_img` a2
        where a2.board_idx = a1.idx and a1.idx = #{idx}
        and a2.extenstion != 'pdf';
    </select>

    <select id="selectByIdxList" resultType="com.library.application.dto.BookDto" parameterType="list">
        select
               a1.* ,
               DATE_FORMAT(a2.borrowed_date,'%Y-%m-%d') as 'borrowedBookDto.borrowed_date',
               DATE_FORMAT(a2.return_date,'%Y-%m-%d') as 'borrowedBookDto.return_date'
        from Book a1 , Borrowed_book a2
        where
        a1.idx=a2.ref_idx and a1.idx in
        <foreach collection="list" item="idx" open="(" separator="," close=")">
            #{idx}
        </foreach>
        order by a1.idx desc
    </select>

    <insert id="insertBook" parameterType="com.library.application.dto.BookDto">
        insert into `Book`(name,author,publisher,userId,topic,topic2,detail)
        values
            (#{name},#{author},#{publisher},#{userId},#{topic},#{topic2},#{detail})
    </insert>
    <select id="countBook" resultType="int" parameterType="com.library.application.dto.BookDto">
        select count(*) from Book where name = #{name}
    </select>
    <select id="selectAll" resultType="com.library.application.dto.BookDto" parameterType="String">
        <choose>
            <when test="flag=='all'">
                select <include refid="BookDto"/>
                FROM
                `Book` a1 , `Book_img` a2
                WHERE a2.board_idx = a1.idx and borrow=0
            </when>
            <when test="flag!='all' and flag!='not'">
                select <include refid="BookDto"/>
                FROM
                `Book` a1 , `Book_img` a2
                WHERE a2.board_idx = a1.idx and (a1.topic =#{flag} or a1.topic2=#{flag}) and borrow=0
            </when>
            <when test="flag=='not'">
                select <include refid="BookDto"/>
                FROM
                `Book` a1 , `Book_img` a2
                WHERE a2.board_idx = a1.idx and a1.borrow=1
            </when>
        </choose>
            and a2.extenstion != 'pdf';

    </select>

    <update id="borrowBook" parameterType="HashMap">
        update `Book`
        set borrow =
                if(
                            (select count(*) from `Borrowed_book` where ref_idx=#{book_idx}) > 0,1,0
                    )
        where idx= #{book_idx};
    </update>

    <update id="autoBookReturn" parameterType="java.util.Map">
        <foreach collection="list" item="i" index="index" open="" separator=";" close=";">
        update `Book`
        set borrow =
                if(
                            (select count(*) from `Borrowed_book` where ref_idx=#{i.ref_idx}) > 0,1,0
                    )
        where idx = #{i.ref_idx}
        </foreach>
    </update>
    <update id="favoritesToggle" parameterType="HashMap">
        update Book
        set favorites = if(
                favorites = 0 , 1 , 0
            )
        where idx = #{book_idx}
    </update>
    <update id="bookReturn" parameterType="list">
        <foreach collection="list" item="idx" index="index" open="" separator=";" close=";">
        update Book
        set borrow = ifnull(
                    (select ref_idx from Borrowed_book where ref_idx = #{idx}) , 0
            )
        where idx = #{idx}
        </foreach>
    </update>
    <delete id="deleteByUserId" parameterType="HashMap">
        delete from Book
        where userId = #{userId}
    </delete>

    <select id="borrowCheck" parameterType="HashMap" resultType="String">
        SELECT
            IF(count(*) =0 , 'null' , a3.save_name)
        FROM Book a1 , Borrowed_book a2 , Book_img a3
        WHERE a2.ref_idx = #{book_idx} and a1.borrow=1
          and a2.ref_idx = a3.board_idx
          and a3.extenstion='pdf';
    </select>
</mapper>